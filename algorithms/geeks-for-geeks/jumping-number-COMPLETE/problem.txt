Given a positive number X.
Find all Jumping Numbers smaller than or equal to X.

Jumping Number:
  A number is called Jumping Number if all adjacent digits in it differ by only 1.
  All single digit numbers are considered as Jumping Numbers.
  For example
    7,
    8987 and
    4343456 are Jumping numbers.
    But 796 and 89098 are not.

Input:
  The first line of the input contains T denoting the number of testcases.
  Each testcase contain a positive number X.

Output:
  Output all the jumping numbers less than X in sorted order. Jump to example
  for better understanding.

Constraints:
  1 <= T <= 100
  1 <= N <= 10^9

Example:
  Input:
    2
    10
    50
    950
    250
  Output:
    0 1 2 3 4 5 6 7 8 9 10

    0 1 2 3 4 5 6 7 8 9 10 12 21 23 32 34 43 45

    0 1 2 3 4 5 6 7 8 9 10

    0 1 2 3 4 5 6 7 8 9
    10 12
      21 23
        32 34
          43 45
            54 56
              65 67
                76 78
                  87 89
                    98
                      101 121 123           base = 1  multiple = base (+/- 0)
                        210 212 232 234       base = 2  multiple = base (+/-  1)
                          321 323 343 345       base = 3  multiple = base (+/-  1)
                            432 434 454 456       base = 4  multiple = base (+/-  1)
                              543 545 565 567
                                654 656 676 678
                                  765 767 787 789
                                    876 878 898

    0 1 2 3 4 5 6 7 8 9 10
    12 21 23 32 34 43 45 54 56 65 67 76 78 87 89 98
          22     33    44    55    66    77    88     99   // 11 is the key diff
        101 121 123
              122                                          // ?
              210 212 232 234
                211      233                               // 22


Explanation:
  Testcase 2:
    Here, the most significant digits of each jumping number
    is following increasing order, i.e.,
    jumping numbers starting from 0,
    followed by 1,
    then 2 and so on,
    themselves being in increasing order 2, 21, 23.

************************************************************************************
*********************************** PSUEDO CODE: ***********************************
************************************************************************************

 - 1 through 10 is automatically printed.
 - Is there a divide and conquer implementation?
  * What would the subproblem be?
  * Divide the number into chunks of 10^k.
    e.g: 40-49, 50-59


    partition(start, finish, multiple)  // 10 20 - 1, 1 = 11 (10, 12)
    partition(start, finish, multiple)  // 40 50 - 1, 4 = 44 (43, 45)
    partition(start, finish, multiple)  // 50 60 - 1, 5 = 55 (54, 56)
    partition(start, finish, multiple)  // 90 100 - 1, 9  = 99 (98, 100)
    partition(start, finish, multiple)  // 100, 110 - 1, 10 = 110 (109, 111) // 109
    partition(start, finish, multiple)  // 110, 120 - 1, 11 = 121 (120, 122) // 121
    partition(start, finish, multiple)  // 200, 220 - 1, 20 = 210 (209, 211) // 210
    partition(start, finish, multiple)  // 221, 130 - 1, 21 = 132 (109, 111) //


    [0, 0, 0] // Pre-populate the digits list with the maximum needed place holders.
    [0, 0, 9] // increment small-num by 1
    [0, 0, 10]// digit is length-2. Increase left by 1, decrease right to 0.
              // if small-num is 10,
              // recursively call this function...
              // decrease small-num to 0
              // add 1 total.
              // evaluate for jumps.

    [0, 1, 0] // yes, increase right by 2
    [0, 1, 2] // yes, right is bigger than left, increase left, decrease right
    [0, 2, 1] // yes, increase right by 2
    [0, 2, 3] // yes, right is bigger than left, increase left, decrease right
    [0, 3, 2] // yes, increase right by 2
    [0, 3, 4] // yes, right is bigger than left, increase left, decrease right.
    [0, 4, 3] // yes, increase right by 2
    [0, 4, 5] // yes, right is bigger than left, increase left, decrease right.
    [0, 5, 4] // yes, increase right by 2
    [0, 5, 6] // yes, right is bigger than left, increase left, decrease right.
    [0, 9, 8] // yes, increase right by 2
    [0, 9, 10] // digit is length-2. Increase left by 1, decrease right to 0.
    [0, 10, 0] // digit is length-2, increase left by 1, decrease right to 0.
    [1, 0, 0] // no, increase right by 1
    [1, 0, 1] // yes,



    1 0 // yes increase smallest digits
    1 1 // no, beacuse both digits are the same.
        // increase smallest digit again.
    1 2 // yes, increase smallest digit again.
    1 3 // no, because right digit is bigger than left and both digits have a difference of 2.
    2 1 // left digits starts one digits larger than before & right digit starts one less than left.
        // yes, increase smallest digit again.
    2 2 // no, because both digits are the same.
        // increase smallest digit again
    2 3 // yes, increase smallest digit again
    2 4 // no because digit is bigger than left and both digits have a difference of 2.
    3 2 // left digits starts one digits larger than before & right digit starts one less than left.
        // yes, increase smallest digit again.
    3 3 // no, beacuse both digits are the same.
        // increase smallest digit again.
    3 4 // yes, increase smallest digit again.
    8 9 // increase left digit
    9 8 // yes
    9 10 // right digit increased the total length
         // meaning the left digit must change & the right digit must be as many zero's to maintain the same length.
  1 0 0 // + 1 zero, to keep new length of 3 digits.
         // no, increase right digit
  1 0 1 // yes
  1 0 2 // no, increase left digit.
  1 1 0 // no, incrase right digit (1)
  1 1 1 // no, increase right digit (2)
  1 1 2 // no, increase left digit
  1 2 0 // no, increase right digit (1)
  1 2 1 // yes, increase right digit (2)
  1 2 2 // no, increase left digit
  1 3 0 // no, incrase right digit (1)
        // right digits has an individual difference of 2, meaning increase the left-most digit.
  2 0 0 //


  ************************************************************************************
  *********************************** TEST CASES: ***********************************
  ************************************************************************************
  input: 83984
  output:
  0 1 10 12 101 121 123 1010 1012 1210 1212 1232 1234 10101 10121 10123 12101 12121 12123 12321 12323
 12343 12345 2 21 23 210 212 232 234 2101 2121 2123 2321 2323 2343 2345 21010 21012 21210 21212 21232
 21234 23210 23212 23232 23234 23432 23434 23454 23456 3 32 34 321 323 343 345 3210 3212 3232 3234 
 3432 3434 3454 3456 32101 32121 32123 32321 32323 32343 32345 34321 34323 34343 34345 34543 34545 
 34565 34567 4 43 45 432 434 454 456 4321 4323 4343 4345 4543 4545 4565 4567 43210 43212 43232 43234
 43432 43434 43454 43456 45432 45434 45454 45456 45654 45656 45676 45678 5 54 56 543 545 565 567 
 5432 5434 5454 5456 5654 5656 5676 5678 54321 54323 54343 54345 54543 54545 54565 54567 56543 
 56545 56565 56567 56765 56767 56787 56789 6 65 67 654 656 676 678 6543 6545 6565 6567 6765 6767 
 6787 6789 65432 65434 65454 65456 65654 65656 65676 65678 67654 67656 67676 67678 67876 67878 
 67898 7 76 78 765 767 787 789 7654 7656 7676 7678 7876 7878 7898 76543 76545 76565 76567 76765
 76767 76787 76789 78765 78767 78787 78789 78987 78989 8 87 89 876 878 898 8765 8767 8787 8789
 8987 8989 87654 87656 87676 87678 87876 87878 87898 9 98 987 989 9876 9878 9898

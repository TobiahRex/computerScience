Given a positive number X.
Find all Jumping Numbers smaller than or equal to X.

Jumping Number:
  A number is called Jumping Number if all adjacent digits in it differ by only 1.
  All single digit numbers are considered as Jumping Numbers.
  For example
    7,
    8987 and
    4343456 are Jumping numbers.
    But 796 and 89098 are not.

Input:
  The first line of the input contains T denoting the number of testcases.
  Each testcase contain a positive number X.

Output:
  Output all the jumping numbers less than X in sorted order. Jump to example
  for better understanding.

Constraints:
  1 <= T <= 100
  1 <= N <= 10^9

Example:
  Input:
    2
    10
    50
    950
    250
  Output:
    0 1 2 3 4 5 6 7 8 9 10

    0 1 2 3 4 5 6 7 8 9 10 12 21 23 32 34 43 45

    0 1 2 3 4 5 6 7 8 9 10

    0 1 2 3 4 5 6 7 8 9 10 12 21 23 32 34 43 45 54 56 65 67 76 78 87 89 98
      101 121 123
        210 212 232 234
          321 323 343 345
            432 434 454 456
              543 545 565 567
                654 656 676 678
                  765 767 787 789
                    876 878 898

    0 1 2 3 4 5 6 7 8 9 10
    12 21 23 32 34 43 45 54 56 65 67 76 78 87 89 98
          22     33    44    55    66    77    88     99   // 11 is the key diff
        101 121 123
              122                                          // ?
              210 212 232 234
                211      233                               // 22


Explanation:
  Testcase 2:
    Here, the most significant digits of each jumping number
    is following increasing order, i.e.,
    jumping numbers starting from 0,
    followed by 1,
    then 2 and so on,
    themselves being in increasing order 2, 21, 23.

PSUEDO CODE:
 - 1 through 10 is automatically printed.
 - Is there a divide and conquer implementation?
  * What would the subproblem be?
  * Divide the number into chunks of 10^k.
    e.g: 40-49, 50-59

    partition(start, finish)  // 40 50 - 1
    partition(start, finish)  // 50 60 - 1
    partition(start, finish)  // 90 100 - 1
    partition(start, finish)  // 100, 110
